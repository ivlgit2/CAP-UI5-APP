const _error = (_,p)=> global.cds.error.no_primary_db(p,_error)
const _missing = new Proxy ({},{ get:_error })
let db = _missing

module.exports = class cds_as_facade_to_primary_db {

    set db(v) { db = v || _missing }
    get db() { return db === _missing ? undefined : db }
    get then() { return db === _missing || db.then }
    get catch() { return db === _missing || db.catch }
    get entities() { return db.entities }

    transaction(..._) { return db.transaction(..._) }
    tx(..._) { return db.tx(..._) }
    run(..._) { return db.run(..._) }
    foreach(..._) { return db.foreach(..._) }
    stream(..._) { return db.stream(..._) }
    read(..._) { return db.read(..._) }
    insert(..._) { return db.insert(..._) }
    update(..._) { return db.update(..._) }
    delete(..._) { return db.delete(..._) }

    // We should get rid of that:
    disconnect(..._) { return db.disconnect(..._) }

}.prototype
