const _cds = require('../../lib/cds')

module.exports = Object.assign(build, {
    options: ['--project', '--for', '--use', '--src', '--dest', '--options-model'],
    flags: ['--clean'],
    shortcuts: ['-in', '4', '', '', '-o'],
    help: `
# SYNOPSIS

    *cds build* [<options>]

    Builds the modules by compiling contained cds sources.
    The modules are folders in the project root.
    Cleaning the build target is always performed before actual build starts,
    the --clean option has been deprecated.


# OPTIONS

    *-in* | *--project* <folder>

        use the specified folder as the project root.
        default = current working directory ./

    *-4* | *--for* <target>

        alias used to build the source, e.g. hana -> @sap/cds/build/hana.

    *--use* <module>

       fully qualified name of the npm module used to build the source.
       In the current version external build plugins are not supported.

    *--src*

        source folder used as build input

    *-o*  | *--dest* <folder>

        writes output to the given folder of the project root directory.
        default = ${_cds.env.build.target}

    *--options-<name>*

        any build plugin specific options that need to be passed,
        e.g. options-model db, srv.


# EXAMPLES

   *cds* build/all
   *cds* build/all -o out
   *cds* build/all --for hana --src db --model srv --dest db
   *cds* build/all --use @sap/cds/build/hana --src db --dest db --options-model db, srv
`
})

function build([project], cmdOptions = {}, /* for unit tests only: */ _env = null) {
    cmdOptions.project = cmdOptions.project || project
    return require('../../lib/build').build(cmdOptions, _env)
}
