// TODO: use new lib/common/utils/uuid.js once in master
const uuid = require('@sap/cds-foss')('uuid/v4')

const { SELECT } = global

// REVISIT: draft should not be handled here, e.g., target.name should be adjusted before
const { isDraftEnabled } = require('../utils/draft')
const {
  isActiveEntityRequested,
  removeIsActiveEntityRecursively
} = require('../../cds-services/services/utils/draftWhereUtils')
const { ensureDraftsSuffix } = require('../../cds-services/services/utils/draftUtils')

const _getETagElement = target => Object.values(target.elements).find(element => element['@odata.etag'])

const _getWhere = query =>
  (query.SELECT && query.SELECT.where) || (query.UPDATE && query.UPDATE.where) || (query.DELETE && query.DELETE.where)

const _getSelectCQN = (target, where) =>
  SELECT.from(isActiveEntityRequested(where) ? target.name : ensureDraftsSuffix(target.name)).columns([
    _getETagElement(target).name
  ])

/**
 * Generic handler for @odata.etag-enabled entities
 */
const _handler = async req => {
  if (req._.odataReq.getConcurrentResource() !== null) {
    const etagElement = _getETagElement(req.target)

    // validate
    if (req._.odataReq.isConditional()) {
      const where = _getWhere(req.query)
      if (where) {
        const cqn = _getSelectCQN(req.target, where)
        const result = await req.run(cqn.where(removeIsActiveEntityRecursively(where)))

        if (result.length === 1) {
          req._.odataReq.validateEtag(Object.values(result[0])[0])
        } else {
          req._.odataReq.validateEtag('*')
        }
      } else {
        req._.odataReq.validateEtag('*')
      }
    }

    // generate new etag, if UUID
    if (['CREATE', 'UPDATE'].includes(req.event) && etagElement.type === 'cds.UUID') {
      req.data[etagElement.name] = uuid()
    }
  }
}

/*
 * handler registration
 */
/* istanbul ignore next */
module.exports = function () {
  for (let k in this.entities) {
    const entity = this.entities[k]

    if (!Object.values(entity.elements).some(ele => ele['@odata.etag'])) {
      // entity not @odata.etag-enabled
      continue
    }

    let events = ['CREATE', 'READ', 'UPDATE', 'DELETE']
    // if odata and fiori is separated, this will not be needed in the odata version
    if (isDraftEnabled(entity)) {
      events = ['READ', 'NEW', 'DELETE', 'PATCH', 'EDIT', 'CANCEL']
    }
    this.before(events, entity.name, _handler)

    for (let k in entity.actions) {
      this.before(entity.actions[k].name, entity.name, _handler)
    }
  }
}

/*
 * export handler for use in old stack
 */
module.exports.handler = _handler
