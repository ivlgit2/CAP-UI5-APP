const rollback = msg => {
  if (!msg || !msg._ || !msg._.shared || !msg._.shared.connections) {
    return null
  }

  const map = msg._.shared.connections.get(msg._txId)
  if (!map) {
    return null
  }

  // REVISIT: how to handle some rollbacks fail?
  const rollbacks = []
  for (const tx of map.values()) {
    rollbacks.push(tx.rollback())
  }
  return Promise.all(rollbacks)
}

const commit = msg => {
  if (!msg || !msg._ || !msg._.shared || !msg._.shared.connections) {
    return null
  }

  const map = msg._.shared.connections.get(msg._txId)
  if (!map) {
    return null
  }

  // REVISIT: how to handle some commits fail?
  const commits = []
  for (const tx of map.values()) {
    commits.push(tx.commit(true))
  }
  return Promise.all(commits)
}

module.exports = { commit, rollback }
