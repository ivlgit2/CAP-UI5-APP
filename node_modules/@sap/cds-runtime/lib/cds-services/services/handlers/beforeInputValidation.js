const { checkInputConstraints } = require('../../util/assert')
const _beforeInputValidationDeep = (data, context, model, target) => {
  if (!Array.isArray(data)) {
    return _beforeInputValidationDeep([data], context, model, target)
  }
  const errors = data.reduce((result, row) => {
    return Object.entries(row)
      .filter(([key, value]) => value !== null && value !== undefined)
      .reduce((result, [key, value]) => {
        if (Array.isArray(value)) {
          const newTarget = model.definitions[target.elements[key].target]
          _beforeInputValidationDeep(value, context, model, newTarget)
        }
        return checkInputConstraints(target, key, value, result)
      }, result)
  }, [])

  if (errors.length !== 0) {
    for (const error of errors) {
      context.error(error.statusCode, error.message)
    }
  }
}

/**
 * Generic handler for input validation
 * Checks if input constrains like @assert.range or @assert.format are provided and validates input values
 * @returns context.reject in case of incorrect values
 *
 * @alias module:handlers.beforeInputValidation
 */
const beforeInputValidation = ({ model } = {}) => context => {
  if (context.target) {
    return _beforeInputValidationDeep(context.data, context, model, context.target)
  }
}

module.exports = beforeInputValidation
