const getStatements = require('./getStatements')
const getUserAndAttr = require('./getUserAndAttr')
const DelayedEmitter = require('./DelayedEmitter')
const MODEL = Symbol.for('sap.cds.model')
const { convertDateTime } = require('../../services/utils/handlerUtils')

class BaseContext extends DelayedEmitter {
  constructor (service, txId) {
    super(txId)
    this.statements = getStatements(service)

    // Supporting legacy data services, where the connect does not include a model definition.
    Object.defineProperty(this, MODEL, { value: service.model })
  }

  setHttpMethod (method) {
    this.method = method
  }

  setUserAndAttr (service) {
    const { user, attr } = getUserAndAttr(this._, service)
    this.user = user
    this.attr = attr
  }

  postPreparation (incomingRequest) {
    if (this.target) {
      convertDateTime(this.data, this.target.elements)
    }

    if (incomingRequest.performanceMeasurement) {
      this.performanceMeasurement = incomingRequest.performanceMeasurement
    }

    if (incomingRequest.dynatrace) {
      this.dynatrace = incomingRequest.dynatrace
    }
  }

  fillKeyValues (keyValues, data) {
    for (const key of Object.keys(keyValues)) {
      data[key] = keyValues[key]
    }
  }
}

module.exports = BaseContext
