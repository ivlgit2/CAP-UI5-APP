"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@sap-cloud-sdk/util");
var uri_value_converter_1 = require("../../uri-value-converter");
var util_2 = require("../../util");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'get-resource-path'
});
/**
 * Get the resource path of an entity specified by key-value pairs.
 *
 * @typeparam EntityT - Type of the entity to get the resource path for
 * @param keys - Key-value pairs where the key is the name of a key property of the given entity and the value is the respective value
 * @param entityConstructor - Constructor type of the entity to get the resource path for
 * @returns The path to the resource
 */
function getResourcePathForKeys(keys, entityConstructor) {
    if (keys === void 0) { keys = {}; }
    keys = filterNonKeyProperties(keys, entityConstructor);
    validateKeys(keys, entityConstructor);
    if (Object.keys(keys).length) {
        var byKey = Object.entries(keys)
            .map(function (_a) {
            var key = _a[0], value = _a[1];
            return keyToOData(key, value, entityConstructor);
        })
            .join(',');
        return entityConstructor._entityName + "(" + byKey + ")";
    }
    return entityConstructor._entityName;
}
exports.getResourcePathForKeys = getResourcePathForKeys;
function getMissingKeys(keys, entityConstructor) {
    var givenKeys = Object.keys(keys);
    return entityConstructor._keyFields.map(function (field) { return field._fieldName; }).filter(function (fieldName) { return !givenKeys.includes(fieldName); });
}
function getInvalidKeys(keys, entityConstructor) {
    var validKeys = entityConstructor._keyFields.map(function (field) { return field._fieldName; });
    return Object.keys(keys).filter(function (key) { return !validKeys.includes(key); });
}
function getNullishKeys(keys) {
    return Object.entries(keys)
        .filter(function (_a) {
        var _ = _a[0], value = _a[1];
        return typeof value === 'undefined' || value === null;
    })
        .map(function (_a) {
        var key = _a[0];
        return key;
    });
}
function filterNonKeyProperties(keys, entityConstructor) {
    var invalidKeys = getInvalidKeys(keys, entityConstructor);
    if (invalidKeys.length) {
        logger.warn("There are too many key properties. Ignoring the following keys: " + invalidKeys.join(', '));
        return Object.entries(keys)
            .filter(function (_a) {
            var key = _a[0];
            return !invalidKeys.includes(key);
        })
            .reduce(function (validKeys, _a) {
            var _b;
            var key = _a[0], value = _a[1];
            return (__assign(__assign({}, validKeys), (_b = {}, _b[key] = value, _b)));
        }, {});
    }
    return keys;
}
function keyToOData(key, value, entityConstructor) {
    var edmType = entityConstructor[util_2.toStaticPropertyFormat(key)].edmType;
    return key + "=" + uri_value_converter_1.convertToUriFormat(value, edmType);
}
function validateKeys(keys, entityConstructor) {
    var missingKeys = getMissingKeys(keys, entityConstructor);
    if (missingKeys.length) {
        throw new Error("Cannot get resource path for entity " + entityConstructor._entityName + ". The following keys are missing: " + missingKeys.join(', '));
    }
    var nullishKeys = getNullishKeys(keys);
    if (nullishKeys.length) {
        throw new Error("Cannot get resource path for entity " + entityConstructor._entityName + ". The following keys have nullish values, but are not nullable: " + nullishKeys.join(', '));
    }
}
//# sourceMappingURL=get-resource-path.js.map