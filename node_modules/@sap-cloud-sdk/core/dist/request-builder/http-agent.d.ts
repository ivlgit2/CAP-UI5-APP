/// <reference types="node" />
import * as http from 'http';
import * as https from 'https';
import { Destination } from '../scp-cf';
/**
 * Returns the http or https-agent config depending on the destination URL.
 * If the destination contains a proxy configuration, the agent will be a proxy-agent.
 * If not it will be the default http-agent coming from node.
 *
 * @param destination - determining which kind of configuration is returned
 * @returns The http or http-agent configuration.
 */
export declare function getAgentConfig(destination: Destination): HttpAgentConfig | HttpsAgentConfig;
/**
 * Interface for the http-agent within the Axios request config.
 */
export interface HttpAgentConfig {
    httpAgent: http.Agent;
}
/**
 * Interface for the https-agent within the Axios request config.
 */
export interface HttpsAgentConfig {
    httpsAgent: https.Agent;
}
/**
 * Extracts the http protocol from the destination url. The default value is http if no protocol is given.
 *
 * @param destination - URL of this destination is parsed
 * @throws Error in case a unsupported protocol is given in the destination URL like rfc://example.com.
 * @returns The protocol, either https or http.
 */
export declare function getProtocolOrDefault(destination: Destination): Protocol;
/**
 * @deprecated Since v1.5.1. use getProtocolOrDefault instead
 * Takes the destination URL and return everything before the '://'.
 *
 * @param destination - URL of this destination is parsed
 * @returns The protocol either undefined if no :// is found or anything before the delimiter.
 */
export declare function getUrlProtocol(destination: Destination): Protocol | undefined;
/**
 * Protocol enumeration, either 'http' or 'https'.
 */
export declare enum Protocol {
    HTTP = "http",
    HTTPS = "https"
}
export declare namespace Protocol {
    /**
     * Get [[Protocol]] from its string representation.
     * @param protocol Protocol as string, either 'http' or 'https'.
     * @returns Either the matching protocol or undefined
     */
    function of(protocol: string): Protocol | undefined;
}
//# sourceMappingURL=http-agent.d.ts.map