"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@sap-cloud-sdk/util");
var axios_1 = __importDefault(require("axios"));
var rambda_1 = require("rambda");
var http_client_1 = require("../../http-client");
var http_agent_1 = require("../http-agent");
var header_builder_1 = require("./header-builder");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'csrf-token-header'
});
function addCsrfTokenAndCookies(request, headers) {
    if (request.config.method === 'get' || Object.keys(headers).includes('x-csrf-token')) {
        return Promise.resolve(headers);
    }
    return csrfTokenAndCookies(request)(headers);
}
exports.addCsrfTokenAndCookies = addCsrfTokenAndCookies;
var csrfTokenAndCookies = function (request) { return function (headers) {
    return util_1.asyncPipe(getCsrfTokenResponseHeaders(request), validateCsrfTokenResponse, mergeTokenAndCookies(headers))(headers);
}; };
var getCsrfTokenResponseHeaders = function (request) { return function (authHeader) {
    // Ignore possibly defined if-match header.
    var _ = authHeader["if-match"], csrfRequestHeaders = __rest(authHeader, ['if-match']);
    if (!request.destination) {
        throw Error('The request destination is undefined.');
    }
    var requestDataWithAxiosKeys = __assign({ url: request.serviceUrl() }, http_agent_1.getAgentConfig(request.destination));
    return util_1.asyncPipe(header_builder_1.addSapClientHeader(request.destination.sapClient || undefined), addCsrfFetchHeader, header_builder_1.addProxyHeaders(request.destination.proxyConfiguration), header_builder_1.addLocationIdHeader(request.destination.cloudConnectorLocationId), function (headers) { return (__assign(__assign({ headers: headers }, http_client_1.getAxiosConfigWithDefaults()), requestDataWithAxiosKeys)); }, function (axiosConfig) { return retrieveCsrfTokenHeaders(axiosConfig); })(csrfRequestHeaders);
}; };
var addCsrfFetchHeader = function (headers) { return rambda_1.assoc('x-csrf-token', 'Fetch')(headers); };
var retrieveCsrfTokenHeaders = function (axiosConfig) {
    return axios_1.default
        .request(axiosConfig)
        .then(function (response) { return response.headers; })
        .catch(function (error) {
        if (!error.response) {
            throw new Error('The error response is undefined.');
        }
        return error.response.headers;
    });
};
var validateCsrfTokenResponse = function (responseHeaders) {
    if (!responseHeaders['x-csrf-token']) {
        logger.warn('Destination did not return a CSRF token. This may cause a failure when sending the OData request.');
    }
    if (!responseHeaders['set-cookie']) {
        logger.warn('CSRF header response does not include cookies.');
    }
    return responseHeaders;
};
var mergeTokenAndCookies = function (headers) { return function (csrfResponseHeaders) {
    return rambda_1.pipe(addCsrfTokenHeader(csrfResponseHeaders['x-csrf-token']), addCookieHeader(csrfResponseHeaders['set-cookie']))(headers);
}; };
var addCsrfTokenHeader = function (csrfToken) { return function (headers) { return util_1.assocSome('x-csrf-token', csrfToken)(headers); }; };
var addCookieHeader = function (cookies) { return function (headers) { return util_1.assocSome('cookie', buildCookieHeaderValue(cookies))(headers); }; };
var buildCookieHeaderValue = function (cookies) {
    return cookies && cookies.length ? cookies.map(function (cookie) { return rambda_1.head(cookie.split(';')); }).join(';') : undefined;
};
//# sourceMappingURL=csrf-token-header.js.map