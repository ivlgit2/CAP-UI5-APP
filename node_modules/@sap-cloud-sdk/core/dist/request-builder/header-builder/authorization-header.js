"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@sap-cloud-sdk/util");
var rambda_1 = require("rambda");
var scp_cf_1 = require("../../scp-cf");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'authorization-header'
});
/**
 * Adds authorization headers for a given ODataRequest to existing headers.
 *
 * @param request - an ODataRequest.
 * @param headers - The headers that should be added to.
 * @returns The provided headers with the new authorization headers.
 */
function addAuthorizationHeader(request, headers) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (authorizationHeaderFromCustomHeaders(request)) {
                return [2 /*return*/, __assign(__assign({}, headers), toAuthHeaderObject(authorizationHeaderFromCustomHeaders(request)))];
            }
            if (request.needsAuthentication()) {
                if (!request.destination) {
                    throw Error('The request destination is undefined.');
                }
                return [2 /*return*/, exports.buildAndAddAuthorizationHeader(request.destination)(headers)];
            }
            return [2 /*return*/, headers];
        });
    });
}
exports.addAuthorizationHeader = addAuthorizationHeader;
/**
 * Adds authorization headers for a given destination to existing headers.
 *
 * @param destination - A destination.
 * @param headers - The headers that should be added to.
 * @returns The provided headers with the new authorization headers.
 */
exports.buildAndAddAuthorizationHeader = function (destination) { return function (headers) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (destination.proxyType === 'OnPremise' && destination.authentication === 'NoAuthentication') {
                    logger.warn("You are using 'NoAuthentication' in destiantion: " + destination.name + " which is an OnPremise destination. This is a deprecated configuration, most likely you wanted to set-up 'PrincipalPropagation' so please change the destination property to the desired authentication scheme.");
                }
                if (destination.authentication === 'NoAuthentication' || destination.authentication === 'ClientCertificateAuthentication') {
                    return [2 /*return*/, headers];
                }
                else if (!destination.authentication) {
                    logger.warn('No authentication type is specified on the destination! Assuming "NoAuthentication".');
                    return [2 /*return*/, headers];
                }
                _a = [__assign({}, headers)];
                return [4 /*yield*/, buildAuthHeader(destination)];
            case 1: return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([(_b.sent())])), headerForOnPremProxyAuth(destination)])];
        }
    });
}); }; };
var authorizationHeaderFromCustomHeaders = function (request) {
    return rambda_1.path(['config', 'customHeaders', 'authorization'], request) || rambda_1.path(['config', 'customHeaders', 'Authorization'], request);
};
var toAuthHeaderObject = function (authHeader) { return ({ authorization: authHeader }); };
var buildAuthHeader = function (destination) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = destination.authentication;
                switch (_a) {
                    case 'OAuth2SAMLBearerAssertion': return [3 /*break*/, 1];
                    case 'OAuth2ClientCredentials': return [3 /*break*/, 2];
                    case 'BasicAuthentication': return [3 /*break*/, 4];
                    case 'PrincipalPropagation': return [3 /*break*/, 5];
                }
                return [3 /*break*/, 6];
            case 1:
                if (!destination.authTokens) {
                    throw new Error('The auth token is null.');
                }
                return [2 /*return*/, toAuthHeaderObject(headerFromTokens(destination.authTokens))];
            case 2:
                _b = toAuthHeaderObject;
                return [4 /*yield*/, headerFromOAuth2ClientCredentialsDestination(destination)];
            case 3: return [2 /*return*/, _b.apply(void 0, [_c.sent()])];
            case 4: return [2 /*return*/, toAuthHeaderObject(headerFromBasicAuthDestination(destination))];
            case 5: return [2 /*return*/, headerForUserPropagation(destination)];
            case 6: throw new Error('Failed to build authorization header for the given destination. Make sure to either correctly configure your destination for principal propagation, provide both a username and a password or select "NoAuthentication" in your destination configuration.');
        }
    });
}); };
var throwAllTokensErrored = function (authTokens) {
    throw new Error(__spreadArrays([
        'The destination tried to provide authorization tokens but errored in all cases. This is most likely due to misconfiguration.',
        'Original error messages:'
    ], rambda_1.map(function (token) { return token.error; }, authTokens)).join('\n'));
};
var headerForOnPremProxyAuth = function (destination) {
    if (destination.proxyType !== 'OnPremise') {
        return {};
    }
    // The connectivity service will raise an exception if it can not obtain the 'Proxy-Authorization' and the destination lookup will fail early
    return { 'Proxy-Authorization': destination.proxyConfiguration.headers['Proxy-Authorization'] };
};
var headerForUserPropagation = function (destination) {
    var _a, _b;
    var proxyHeaders = (_b = (_a = destination) === null || _a === void 0 ? void 0 : _a.proxyConfiguration) === null || _b === void 0 ? void 0 : _b.headers;
    if (!proxyHeaders || !proxyHeaders['SAP-Connectivity-Authentication']) {
        throw new Error('Principal propagation was selected in destination, but no SAP-Connectivity-Authentication bearer header was added by connectivity-service.');
    }
    return { 'SAP-Connectivity-Authentication': proxyHeaders['SAP-Connectivity-Authentication'] };
};
var headerFromOAuth2ClientCredentialsDestination = function (destination) {
    return scp_cf_1.getOAuth2ClientCredentialsToken(destination)
        .then(function (resp) { return "Bearer " + resp.access_token; })
        .catch(function (error) { return Promise.reject(util_1.errorWithCause('Request for "OAuth2ClientCredentials" authentication access token failed or denied.', error)); });
};
var headerFromAuthToken = function (token) { return token.type + " " + token.value; };
// Using pipe led to wrong type errors
var headerFromTokens = function (authTokens) {
    var usableTokens = rambda_1.filter(function (token) { return !token.error; }, authTokens);
    if (authTokens === null) {
        throw new Error('AuthenticationType is "OAuth2SAMLBearerAssertion", but no AuthTokens could be fetched from the destination service!');
    }
    if (rambda_1.isEmpty(usableTokens)) {
        throwAllTokensErrored(authTokens);
    }
    rambda_1.ifElse(rambda_1.isEmpty, throwAllTokensErrored, rambda_1.identity)(usableTokens);
    var usableToken = rambda_1.head(usableTokens);
    if (!usableToken) {
        throw new Error("No usable tokens are found in the " + usableTokens);
    }
    return headerFromAuthToken(usableToken);
};
var headerFromBasicAuthDestination = function (destination) {
    if (rambda_1.isNil(destination.username) || rambda_1.isNil(destination.password)) {
        throw new Error('AuthenticationType is "BasicAuthentication", but "username" and/or "password" are missing!');
    }
    return basicHeader(destination.username, destination.password);
};
function basicHeader(username, password) {
    return "Basic " + Buffer.from(username + ":" + password).toString('base64');
}
exports.basicHeader = basicHeader;
//# sourceMappingURL=authorization-header.js.map